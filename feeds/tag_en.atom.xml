<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Liang2's blog</title><link href="//blog.liang2.tw/" rel="alternate"></link><link href="//blog.liang2.tw/feeds/tag_en.atom.xml" rel="self"></link><id>//blog.liang2.tw/</id><updated>2016-02-19T15:00:00+08:00</updated><entry><title>Add code block language name into CSS classes in PelicanÂ Markdown</title><link href="//blog.liang2.tw/posts/2016/02/markdown-codehilite-lang/" rel="alternate"></link><updated>2016-02-19T15:00:00+08:00</updated><author><name>Liang2</name></author><id>tag:blog.liang2.tw,2016-02-19:posts/2016/02/markdown-codehilite-lang/</id><summary type="html">&lt;p&gt;I used &lt;a href="http://docs.getpelican.com/"&gt;Pelican&lt;/a&gt; and its &lt;a href="https://pythonhosted.org/Markdown/"&gt;Markdown&lt;/a&gt; plugin to render blog&amp;nbsp;post. &lt;/p&gt;
&lt;p&gt;Recently I was playing with the &lt;a href="https://docs.python.org/"&gt;Python Official Documentation&lt;/a&gt;, which has a decent code syntax highlighter powered by &lt;a href="http://pygments.org/"&gt;Pygments&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s more, the output of code examples can be toggled. That is, a code&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="mi"&gt;42&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;can be toggled&amp;nbsp;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is very convenient for code&amp;nbsp;copy-pasting.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;However, the functionality is currently failed on the official Python doc (given by &lt;a href="https://docs.python.org/3/_static/copybutton.js"&gt;&lt;code&gt;copybutton.js&lt;/code&gt;&lt;/a&gt;) because the jQuery updates break previous &lt;span class="caps"&gt;API&lt;/span&gt; behavior. I&amp;rsquo;ve filed &lt;a href="http://bugs.python.org/issue26246"&gt;issue 26246&lt;/a&gt; on the Python issue tracker for this problem.&lt;/del&gt; (&lt;span class="caps"&gt;EDIT&lt;/span&gt; 2016-02-27: the patch has been&amp;nbsp;merged.)&lt;/p&gt;
&lt;h3 id="code-output-toggle-in-pelican"&gt;Code output toggle in&amp;nbsp;Pelican&lt;/h3&gt;
&lt;p&gt;After I fixed the copybutton.js, I wished to add this functionality to my&amp;nbsp;blog. &lt;/p&gt;
&lt;p&gt;Code highlighting in Pelican markdown files is handled by its &lt;a href="https://pythonhosted.org/Markdown/extensions/code_hilite.html"&gt;CodeHilite&lt;/a&gt; extension. To my surprise, I found CodeHilite does not express the language name specified for each code&amp;nbsp;block.&lt;/p&gt;
&lt;p&gt;What I expected&amp;nbsp;was&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;highlight-python3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;highlight&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but the actual output&amp;nbsp;was&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;highlight&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So no way to find the language name the code block used, nor the lexer aliases Pygments guessed when no language name was&amp;nbsp;specified.&lt;/p&gt;
&lt;p&gt;A quick dig into the &lt;a href="https://github.com/waylan/Python-Markdown/blob/master/markdown/extensions/codehilite.py#L106-L123"&gt;source code&lt;/a&gt; showed that it is relatively easy to fix. Here is the&amp;nbsp;diff:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff --git a/extensions/codehilite.py b/extensions/codehilite_updated.py&lt;/span&gt;
&lt;span class="gh"&gt;index 0657c37..4fad7c5 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/extensions/codehilite.py&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/extensions/codehilite_updated.py&lt;/span&gt;
&lt;span class="gu"&gt;@@ -75,7 +75,8 @@ class CodeHilite(object):&lt;/span&gt;

     def __init__(self, src=None, linenums=None, guess_lang=True,
                  css_class=&amp;quot;codehilite&amp;quot;, lang=None, style=&amp;#39;default&amp;#39;,
&lt;span class="gd"&gt;-                 noclasses=False, tab_length=4, hl_lines=None, use_pygments=True):&lt;/span&gt;
&lt;span class="gi"&gt;+                 noclasses=False, tab_length=4, hl_lines=None, use_pygments=True, &lt;/span&gt;
&lt;span class="gi"&gt;+                 wrap_by_lang=True):&lt;/span&gt;
         self.src = src
         self.lang = lang
         self.linenums = linenums
&lt;span class="gu"&gt;@@ -86,6 +87,7 @@ class CodeHilite(object):&lt;/span&gt;
         self.tab_length = tab_length
         self.hl_lines = hl_lines or []
         self.use_pygments = use_pygments
&lt;span class="gi"&gt;+        self.wrap_by_lang = wrap_by_lang&lt;/span&gt;

     def hilite(self):
         &amp;quot;&amp;quot;&amp;quot;
&lt;span class="gu"&gt;@@ -114,13 +116,22 @@ class CodeHilite(object):&lt;/span&gt;
                         lexer = get_lexer_by_name(&amp;#39;text&amp;#39;)
                 except ValueError:
                     lexer = get_lexer_by_name(&amp;#39;text&amp;#39;)
&lt;span class="gi"&gt;+            lang = lexer.aliases[0]&lt;/span&gt;
             formatter = get_formatter_by_name(&amp;#39;html&amp;#39;,
                                               linenos=self.linenums,
                                               cssclass=self.css_class,
                                               style=self.style,
                                               noclasses=self.noclasses,
                                               hl_lines=self.hl_lines)
&lt;span class="gd"&gt;-            return highlight(self.src, lexer, formatter)&lt;/span&gt;
&lt;span class="gi"&gt;+            hilited_html = highlight(self.src, lexer, formatter)&lt;/span&gt;
&lt;span class="gi"&gt;+            if self.wrap_by_lang and self.lang:&lt;/span&gt;
&lt;span class="gi"&gt;+                return &amp;#39;&amp;lt;div class=&amp;quot;%(class)s-%(lang)s&amp;quot;&amp;gt;%(html)s&amp;lt;/div&amp;gt;\n&amp;#39; % {&lt;/span&gt;
&lt;span class="gi"&gt;+                    &amp;#39;class&amp;#39;: self.css_class,&lt;/span&gt;
&lt;span class="gi"&gt;+                    &amp;#39;lang&amp;#39;: lang.replace(&amp;#39;+&amp;#39;, &amp;#39;-&amp;#39;),&lt;/span&gt;
&lt;span class="gi"&gt;+                    &amp;#39;html&amp;#39;: hilited_html,&lt;/span&gt;
&lt;span class="gi"&gt;+                }&lt;/span&gt;
&lt;span class="gi"&gt;+            else:&lt;/span&gt;
&lt;span class="gi"&gt;+                return hilited_html&lt;/span&gt;
         else:
             # just escape and build markup usable by JS highlighting libs
             txt = self.src.replace(&amp;#39;&amp;amp;&amp;#39;, &amp;#39;&amp;amp;amp;&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I&amp;rsquo;m happy with the patched codehilite output. I am now able to give code toggle function to specific code&amp;nbsp;languages. &lt;/p&gt;
&lt;p&gt;However it&amp;rsquo;s quite busy these days, so it may take a while to submit a proper pull request (e.g. fix any broken unit tests, write new tests, and tune the &lt;span class="caps"&gt;API&lt;/span&gt; as well as the new behavior). Moerover, &lt;strong&gt;currently my site does not use jQuery&lt;/strong&gt; so I am missing a huge dependency. Rewriting it using vanilla &lt;span class="caps"&gt;JS&lt;/span&gt; seems to require considerable work, and the very thing I don&amp;rsquo;t have at hand is time&amp;nbsp;:(&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve decided to leave this improvement in future development. But if your site use Pelican Markdown and imports jQuery, the diff will add the code language&amp;nbsp;back. &lt;/p&gt;</summary><category term="en"></category><category term="blog"></category><category term="pelican"></category><category term="codehilite"></category><category term="pygment"></category></entry><entry><title>Coding åå­¸æåéé - Bioinfo Practices usingÂ Python</title><link href="//blog.liang2.tw/posts/2016/01/lab-coding-appendix-bioinfo-python/" rel="alternate"></link><updated>2016-01-21T23:30:00+08:00</updated><author><name>Liang2</name></author><id>tag:blog.liang2.tw,2016-01-21:posts/2016/01/lab-coding-appendix-bioinfo-python/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;I want to play a&amp;nbsp;game.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are going to walk through a series of practice created by &lt;a href="http://rosalind.info/problems/"&gt;Rosalind Team&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Once you register an account at Rosalind, you can use their judging system to work through all problems. However, in this case you cannot arbitrarily skip easy levels and it sucks. So I&amp;rsquo;m not going to force you using the system. Luckily, in each problem one set of example data and expected output is given, which can be used for checking our&amp;nbsp;answer.&lt;/p&gt;
&lt;p&gt;Note: Their code assumes Python 2 but everything I mention here is Python&amp;nbsp;3.&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#python-basics"&gt;Python&amp;nbsp;Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bininfo-first-try"&gt;Bininfo First Try&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#q-dna-counting-dna-nucleotides"&gt;Q &lt;span class="caps"&gt;DNA&lt;/span&gt;: Counting &lt;span class="caps"&gt;DNA&lt;/span&gt;&amp;nbsp;Nucleotides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#q-revc-the-secondary-and-tertiary-structures-of-dna"&gt;Q &lt;span class="caps"&gt;REVC&lt;/span&gt;: The Secondary and Tertiary Structures of &lt;span class="caps"&gt;DNA&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#q-gc-computing-gc-content"&gt;Q: &lt;span class="caps"&gt;GC&lt;/span&gt;: Computing &lt;span class="caps"&gt;GC&lt;/span&gt; Content&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#workthrough"&gt;Workthrough&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#q-next"&gt;Q:&amp;nbsp;(next?)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="python-basics"&gt;Python&amp;nbsp;Basics&lt;/h2&gt;
&lt;p&gt;Do their &lt;a href="http://rosalind.info/problems/list-view/?location=python-village"&gt;Python Village&lt;/a&gt; problem sets. If any topic you don&amp;rsquo;t know, go read your Python&amp;nbsp;reference.&lt;/p&gt;
&lt;p&gt;Should be very&amp;nbsp;trivial.&lt;/p&gt;
&lt;h2 id="bininfo-first-try"&gt;Bininfo First&amp;nbsp;Try&lt;/h2&gt;
&lt;h3 id="q-dna-counting-dna-nucleotides"&gt;Q &lt;span class="caps"&gt;DNA&lt;/span&gt;: Counting &lt;span class="caps"&gt;DNA&lt;/span&gt;&amp;nbsp;Nucleotides&lt;/h3&gt;
&lt;p&gt;Link: &lt;a href="http://rosalind.info/problems/dna/"&gt;http://rosalind.info/problems/dna/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hint: use &lt;a href="https://docs.python.org/3/library/collections.html#collections.Counter"&gt;collections.Counter&lt;/a&gt; provided by Python&amp;rsquo;s&amp;nbsp;stdlib&lt;/li&gt;
&lt;li&gt;More Hint: use &lt;code&gt;' '.join&lt;/code&gt; and list comprehension to output the&amp;nbsp;answer&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="q-revc-the-secondary-and-tertiary-structures-of-dna"&gt;Q &lt;span class="caps"&gt;REVC&lt;/span&gt;: The Secondary and Tertiary Structures of &lt;span class="caps"&gt;DNA&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Link: &lt;a href="http://rosalind.info/problems/revc/"&gt;http://rosalind.info/problems/revc/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hint: &lt;a href="https://docs.python.org/3/library/functions.html#reversed"&gt;reversed&lt;/a&gt; for any sequence object and a dict for nucleotide code&amp;nbsp;mapping &lt;/li&gt;
&lt;li&gt;More Hint: done in a list&amp;nbsp;comprehension&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="q-gc-computing-gc-content"&gt;Q: &lt;span class="caps"&gt;GC&lt;/span&gt;: Computing &lt;span class="caps"&gt;GC&lt;/span&gt;&amp;nbsp;Content&lt;/h3&gt;
&lt;p&gt;Link: &lt;a href="http://rosalind.info/problems/gc/"&gt;http://rosalind.info/problems/gc/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the first complicated problem that some abstraction should help you come up the solution. Try write some re-usable code blocks, for example, function calls and class&amp;nbsp;definitions.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t worry about the computation&amp;nbsp;complexity&lt;/p&gt;
&lt;h4 id="workthrough"&gt;Workthrough&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;You should implement by yourself before looking my solution. Also I didn&amp;rsquo;t see their official solution so my solution can differ a lot from&amp;nbsp;theirs.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Intuitively, we need to implement a &lt;span class="caps"&gt;FASTA&lt;/span&gt; file parser. &lt;span class="caps"&gt;FASTA&lt;/span&gt; contains a series of sequence reads with unique &lt;span class="caps"&gt;ID&lt;/span&gt;. From a object-oriented viewpoint, we create classes &lt;code&gt;Read&lt;/code&gt; for reads and &lt;code&gt;Fasta&lt;/code&gt; for fasta&amp;nbsp;files.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Read&lt;/code&gt; is easy to design and&amp;nbsp;understand,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since we need to compute their &lt;span class="caps"&gt;GC&lt;/span&gt; content, add a method for &lt;code&gt;Read&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ... skipped&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Compute the GC content (in %) of the read.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# put the logic here (think of problem Q DNA)&lt;/span&gt;
        &lt;span class="n"&gt;gc_percent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;gc_percent&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we have to implement the &lt;span class="caps"&gt;FASTA&lt;/span&gt; parser, which reads all read entries and converts them through &lt;code&gt;Read&lt;/code&gt;. In real world we are dealing with &lt;code&gt;myfasta.fa&lt;/code&gt;-like files, but here the input is&amp;nbsp;string.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fasta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;raw_str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Parse a FASTA formated string.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_str&lt;/span&gt;
        &lt;span class="c1"&gt;# convert string into structured reads.&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Parse the string and yield read in Read class.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# though we have no idea right now, the code structure&lt;/span&gt;
        &lt;span class="c1"&gt;# should be something like the following.&lt;/span&gt;
        &lt;span class="n"&gt;raw_lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;raw_lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here I use &lt;code&gt;yield Read(...)&lt;/code&gt;, which may be unfamiliar for Python beginners. It turns &lt;code&gt;parse(self)&lt;/code&gt; function as a generator. Generator makes you focus on the incoming data. Once data is parsed and converted, the result is immediated thrown out by &lt;code&gt;yield&lt;/code&gt;. We don&amp;rsquo;t care about how to collect all the results. In our case, we catch all the results into a list by &lt;code&gt;list(...)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So how should we read &lt;span class="caps"&gt;FASTA&lt;/span&gt; file? A simple rule in this case is that every read consists by two continuous row. Also, the first row will always be the first read&amp;nbsp;id.&lt;/p&gt;
&lt;p&gt;All we need is read two lines at the same time. Here &lt;a href="https://docs.python.org/3/library/functions.html#zip"&gt;a Pythonic idiom&lt;/a&gt; is introduced. The following code read two non-overlapping&amp;nbsp;lines,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;first_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second_line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_lines&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;first_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;second_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By &lt;code&gt;zip(*[iter(s)]*n)&lt;/code&gt; magic, we are very close to implement a full parser. You could find a lot of &lt;a href="http://stackoverflow.com/a/2233247"&gt;explanations&lt;/a&gt; for this&amp;nbsp;magic. &lt;/p&gt;
&lt;p&gt;Read id line percedes with a &lt;code&gt;&amp;gt;&lt;/code&gt; sign, so we could use something like &lt;code&gt;first_line[1:]&lt;/code&gt; or &lt;code&gt;first_line[len('&amp;gt;'):]&lt;/code&gt; for&amp;nbsp;explicity.&lt;/p&gt;
&lt;p&gt;Then sorting the &lt;span class="caps"&gt;GC&lt;/span&gt;% of reads in a &lt;span class="caps"&gt;FASTA&lt;/span&gt; file is&amp;nbsp;easy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fasta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fasta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sorted_reads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fasta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reads&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  &lt;span class="c1"&gt;# note 1&lt;/span&gt;
&lt;span class="n"&gt;top_gc_read&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sorted_reads&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# note 2&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;&amp;gt;{0:s}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;{1:.6f}&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# note 3, 4&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top_gc_read&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;top_gc_read&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code above completes the following&amp;nbsp;steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sorted(list, key=key_func)&lt;/code&gt; sorts the list based on the return value of key_func applied to each&amp;nbsp;element.&lt;/li&gt;
&lt;li&gt;or &lt;code&gt;top_gc_read = sorted(..., reversed=True)[0]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;two string with no operands in between will be joint automatically. In this case it is exactly &lt;code&gt;&amp;gt;{0:s}\n{1:.6f}&lt;/code&gt;. This is useful to tidy a super long&amp;nbsp;string.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'...'.format()&lt;/code&gt; fills the string with given values. See &lt;a href="https://docs.python.org/3/library/string.html#formatspec"&gt;doc&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In real case &lt;span class="caps"&gt;FASTA&lt;/span&gt; can span across multiple lines, also likely the file we parse is broken. How could we modify this parser to handle these&amp;nbsp;situations?&lt;/p&gt;
&lt;h3 id="q-next"&gt;Q:&amp;nbsp;(next?)&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m super tired now so I&amp;rsquo;ll leave the rest for you. Try those problems within yellow correct ratio&amp;nbsp;range.&lt;/p&gt;</summary><category term="en"></category><category term="labcoding"></category><category term="python"></category></entry><entry><title>Plot Sequencing Depth withÂ Gviz</title><link href="//blog.liang2.tw/posts/2016/01/plot-seq-depth-gviz/" rel="alternate"></link><updated>2016-01-15T23:50:00+08:00</updated><author><name>Liang2</name></author><id>tag:blog.liang2.tw,2016-01-15:posts/2016/01/plot-seq-depth-gviz/</id><summary type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt;&lt;/strong&gt; Plot exome sequencing depth and coverage with genome annotation using Gviz in R. Then apply detail control on Gviz annotation track&amp;nbsp;displaying.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is an extending post from &lt;a href="//blog.liang2.tw/posts/2015/12/biocondutor-genomic-data/"&gt;Genomic Data Processing in Bioconductor&lt;/a&gt;, though I haven&amp;rsquo;t finished reading all the reference in that post. The background knowledge of this post is basic understanding of how to deal with annotation and genome reference in Bioconductor/R. If you don&amp;rsquo;t deal with genome annotations in R before, you should find some time learning it anyway, a truly life&amp;nbsp;saver.&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#convert-sequencing-depth-to-bedgraph-format"&gt;Convert sequencing depth to BedGraph&amp;nbsp;format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#plot-depth-in-gviz"&gt;Plot depth in Gviz&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#first-gviz-track"&gt;First Gviz&amp;nbsp;track&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-genome-axis"&gt;Add genome&amp;nbsp;axis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-annotation"&gt;Add&amp;nbsp;annotation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#plot-fine-tune"&gt;Plot fine tune&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#genome-annotation-query-in-bioconductorr"&gt;Genome annotation query in Bioconductor/R&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#via-transcripts"&gt;via&amp;nbsp;transcripts()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#via-exonsby"&gt;via&amp;nbsp;exonsBy()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#show-only-the-annotations-of-certain-genes"&gt;Show only the annotations of certain&amp;nbsp;genes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#display-gene-symbols-at-annotation-track"&gt;Display gene symbols at annotation&amp;nbsp;track&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#supplementary-plot-bam-files-directly"&gt;Supplementary - Plot &lt;span class="caps"&gt;BAM&lt;/span&gt; files directly&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#fancier-alignment-display"&gt;Fancier alignment&amp;nbsp;display&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;I got the chance trying new tricks today when I and other lab members were analyzing our human cancer exome sequencing data. The results were a bunch of &lt;span class="caps"&gt;BAM&lt;/span&gt; files aligned by &lt;a href="https://github.com/lh3/bwa"&gt;&lt;span class="caps"&gt;BWA&lt;/span&gt;-&lt;span class="caps"&gt;MEM&lt;/span&gt;&lt;/a&gt; using reference&amp;nbsp;hg19.&lt;/p&gt;
&lt;p&gt;We want to see how was the sequencing depth and the coverage of all exons designed to be sequenced. Roughly, this can be done in the genome viewer such as &lt;a href="https://www.broadinstitute.org/igv/"&gt;&lt;span class="caps"&gt;IGV&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="figure"&gt;
  &lt;img src="//blog.liang2.tw/posts/2016/01/plot-seq-depth-gviz/pics/seqdepth_IGV.png"/&gt;
  &lt;p class="caption center"&gt;Visualize sequencing depth in &lt;span class="caps"&gt;IGV&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span class="caps"&gt;IGV&lt;/span&gt; is good for daily research, but when it comes to customization, there aren&amp;rsquo;t many options. And if the visualization is aimed for publishing, one might want the figure to be vectorized and, more importantly, &lt;em&gt;reproducible&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Therefore, combining with what I learnt in &lt;a href="//blog.liang2.tw/posts/2015/12/biocondutor-genomic-data/"&gt;Genomic Data Processing in Bioconductor&lt;/a&gt;, I tried to plot the sequencing depth in R with &lt;a href="https://bioconductor.org/packages/release/bioc/html/Gviz.html"&gt;Gviz&lt;/a&gt;. I thought learning Gviz will be demanding, since its vignette has 80 pages and the function documentation are &lt;a href="http://rpackages.ianhowson.com/bioc/Gviz/man/GeneRegionTrack-class.html"&gt;scarily long spells&lt;/a&gt;. But both of them turned out to be &lt;em&gt;really&lt;/em&gt; helpful and informative, especially when trying to tune its behavior. Figures produced by Gviz are aesthetically pleasing, and Gviz has many features as well (still trying). I&amp;rsquo;m glad that I gave it a&amp;nbsp;shot.&lt;/p&gt;
&lt;p&gt;If you want to follow the code yourself, any human &lt;span class="caps"&gt;BAM&lt;/span&gt; alignment files will do. For example, the &lt;span class="caps"&gt;GEO&lt;/span&gt; dataset &lt;a href="http://dev.3dvcell.org/geo/query/acc.cgi?acc=GSE48215"&gt;&lt;span class="caps"&gt;GSE48215&lt;/span&gt;&lt;/a&gt; contains exome sequencing of breast cancer cell&amp;nbsp;lines.&lt;/p&gt;
&lt;h2 id="convert-sequencing-depth-to-bedgraph-format"&gt;Convert sequencing depth to BedGraph&amp;nbsp;format&lt;/h2&gt;
&lt;p&gt;After a quick search, Gviz&amp;rsquo;s &lt;a href="http://rpackages.ianhowson.com/bioc/Gviz/man/DataTrack-class.html"&gt;DataTrack&lt;/a&gt; accepts BedGraph format. This format can display any numerical value of chromosome ranges, shown as&amp;nbsp;follows,&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;chromosome&lt;/th&gt;
&lt;th&gt;start&lt;/th&gt;
&lt;th&gt;end&lt;/th&gt;
&lt;th align="right"&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;chr1&lt;/td&gt;
&lt;td&gt;10,051&lt;/td&gt;
&lt;td&gt;10,093&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;chr1&lt;/td&gt;
&lt;td&gt;10,093&lt;/td&gt;
&lt;td&gt;10,104&lt;/td&gt;
&lt;td align="right"&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td align="right"&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;So we need to convert the alignment result as BedGraph format, which can be done by &lt;a href="http://bedtools.readthedocs.org/en/latest/content/tools/genomecov.html"&gt;BEDTools&amp;rsquo; genomecov&lt;/a&gt; command. On BEDTools&amp;rsquo; documentation, it notes that the &lt;span class="caps"&gt;BAM&lt;/span&gt; file should be&amp;nbsp;sorted. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bedtools genomecov -bg -ibam myseq.bam &amp;gt; myseq.bedGraph
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The plain text BedGraph can be huge, pipe&amp;rsquo;d with gzip will reduce file size to around 30% of the&amp;nbsp;original.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bedtools genomecov -bg -ibam myseq.bam &lt;span class="p"&gt;|&lt;/span&gt; gzip &amp;gt; myseq.bedGraph.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="plot-depth-in-gviz"&gt;Plot depth in&amp;nbsp;Gviz&lt;/h2&gt;
&lt;p&gt;R packages of human genome annotations (&lt;a href="http://bioconductor.org/packages/release/data/annotation/html/Homo.sapiens.html"&gt;Homo.sapiens&lt;/a&gt;) and &lt;a href="https://bioconductor.org/packages/release/bioc/html/Gviz.html"&gt;Gviz&lt;/a&gt; itself are required. Also, &lt;a href="https://cran.r-project.org/web/packages/data.table/index.html"&gt;data.table&lt;/a&gt; gives an impressed speed at reading text tables so is recommended to use. During the analysis, I happened to know that data.table supports &lt;a href="https://github.com/Rdatatable/data.table/issues/717"&gt;reading gzip&amp;rsquo;d file through pipe&lt;/a&gt;, which makes it more&amp;nbsp;awesome.&lt;/p&gt;
&lt;h3 id="first-gviz-track"&gt;First Gviz&amp;nbsp;track&lt;/h3&gt;
&lt;p&gt;We should first start at reading our sequencing depth as BedGraph format and plot&amp;nbsp;it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;data.table&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;Gviz&lt;span class="p"&gt;)&lt;/span&gt;

bedgraph_dt &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; fread&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;./coverage.bedGraph&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    col.names &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;chromosome&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;start&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;end&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Specifiy the range to plot&lt;/span&gt;
thechr &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;chr17&amp;quot;&lt;/span&gt;
st &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;41176e3&lt;/span&gt;
en &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;41324e3&lt;/span&gt;

bedgraph_dt_one_chr &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; bedgraph_dt&lt;span class="p"&gt;[&lt;/span&gt;chromosome &lt;span class="o"&gt;==&lt;/span&gt; thechr&lt;span class="p"&gt;]&lt;/span&gt;
dtrack &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; DataTrack&lt;span class="p"&gt;(&lt;/span&gt;
    range &lt;span class="o"&gt;=&lt;/span&gt; bedgraph_dt_one_chr&lt;span class="p"&gt;,&lt;/span&gt;
    type &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    genome &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hg19&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    name &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Seq. Depth&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
plotTracks&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;dtrack&lt;span class="p"&gt;),&lt;/span&gt;
    from &lt;span class="o"&gt;=&lt;/span&gt; st&lt;span class="p"&gt;,&lt;/span&gt; to &lt;span class="o"&gt;=&lt;/span&gt; en
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So we read the sequencing depth data, create a Gviz &lt;code&gt;DataTrack&lt;/code&gt; holding the subset of our data on chr17, then plot Gviz tracks by &lt;code&gt;plotTracks&lt;/code&gt; (though we only made one here) within a given chromosome region. Here is what we&amp;nbsp;got.&lt;/p&gt;
&lt;div class="figure"&gt;
  &lt;img src="//blog.liang2.tw/posts/2016/01/plot-seq-depth-gviz/pics/seqdepth_one_track.png"/&gt;
&lt;/div&gt;

&lt;h3 id="add-genome-axis"&gt;Add genome&amp;nbsp;axis&lt;/h3&gt;
&lt;p&gt;The figure is a bit weird and lack of information without the genomic&amp;nbsp;location. &lt;/p&gt;
&lt;p&gt;Adding genomic location can be done automatically by Gviz through a new track &lt;code&gt;GenomeAxisTrack&lt;/code&gt;. Also, we&amp;rsquo;d like to show which region of chromosome we are at. This can be done by adding another track, &lt;code&gt;IdeogramTrack&lt;/code&gt;, to show the chromosome ideogram. Note that the latter track will download cytoband data from &lt;span class="caps"&gt;UCSC&lt;/span&gt; so the given genome must have a valid&amp;nbsp;name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;itrack &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; IdeogramTrack&lt;span class="p"&gt;(&lt;/span&gt;
    genome &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hg19&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; chromosome &lt;span class="o"&gt;=&lt;/span&gt; thechr
&lt;span class="p"&gt;)&lt;/span&gt;
gtrack &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; GenomeAxisTrack&lt;span class="p"&gt;()&lt;/span&gt;

plotTracks&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;itrack&lt;span class="p"&gt;,&lt;/span&gt; gtrack&lt;span class="p"&gt;,&lt;/span&gt; dtrack&lt;span class="p"&gt;),&lt;/span&gt;
    from &lt;span class="o"&gt;=&lt;/span&gt; st&lt;span class="p"&gt;,&lt;/span&gt; to &lt;span class="o"&gt;=&lt;/span&gt; en
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="figure"&gt;
  &lt;img src="//blog.liang2.tw/posts/2016/01/plot-seq-depth-gviz/pics/seqdepth_with_loc.png"/&gt;
&lt;/div&gt;

&lt;p&gt;Better now&amp;nbsp;:)&lt;/p&gt;
&lt;h3 id="add-annotation"&gt;Add&amp;nbsp;annotation&lt;/h3&gt;
&lt;p&gt;Since we are using exome sequencing, the curve of sequencing depth only makes senses when combined with the transcript&amp;nbsp;annotations. &lt;/p&gt;
&lt;p&gt;Gviz has &lt;code&gt;GeneRegionTrack&lt;/code&gt; to extract annotation from the R annotation packages. Package Homo.sapiens includes the gene annotation package using &lt;span class="caps"&gt;UCSC&lt;/span&gt; knownGene database. Adding this new track and we will have annotation on our&amp;nbsp;plot.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;TxDb.Hsapiens.UCSC.hg19.knownGene&lt;span class="p"&gt;)&lt;/span&gt;
txdb &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; TxDb.Hsapiens.UCSC.hg19.knownGene

grtrack &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; GeneRegionTrack&lt;span class="p"&gt;(&lt;/span&gt;
    txdb&lt;span class="p"&gt;,&lt;/span&gt;
    chromosome &lt;span class="o"&gt;=&lt;/span&gt; thechr&lt;span class="p"&gt;,&lt;/span&gt; start &lt;span class="o"&gt;=&lt;/span&gt; st&lt;span class="p"&gt;,&lt;/span&gt; end &lt;span class="o"&gt;=&lt;/span&gt; en&lt;span class="p"&gt;,&lt;/span&gt;
    showId &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    name &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Gene Annotation&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

plotTracks&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;itrack&lt;span class="p"&gt;,&lt;/span&gt; gtrack&lt;span class="p"&gt;,&lt;/span&gt; dtrack&lt;span class="p"&gt;,&lt;/span&gt; grtrack&lt;span class="p"&gt;),&lt;/span&gt;
    from &lt;span class="o"&gt;=&lt;/span&gt; st&lt;span class="p"&gt;,&lt;/span&gt; to &lt;span class="o"&gt;=&lt;/span&gt; en
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="figure"&gt;
  &lt;img src="//blog.liang2.tw/posts/2016/01/plot-seq-depth-gviz/pics/seqdepth_with_annotation.png"/&gt;
&lt;/div&gt;

&lt;p&gt;The plot should now be as informative as what we can get from the &lt;span class="caps"&gt;IGV&lt;/span&gt;. In fact, Gviz can plot the alignment result too. It can read the &lt;span class="caps"&gt;BAM&lt;/span&gt; file directly and show a more detailed coverage that matches what &lt;span class="caps"&gt;IGV&lt;/span&gt; can do. I&amp;rsquo;ll leave that part at the end of this&amp;nbsp;post. &lt;/p&gt;
&lt;p&gt;So far we&amp;rsquo;ve shown the sequencing depth of some chromosome region with annotation. However, there still leave something to be desired, mostly about the&amp;nbsp;annotation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can we show only the annotation of certain&amp;nbsp;genes?&lt;/li&gt;
&lt;li&gt;knownGene&amp;rsquo;s identifier is barely meaningless, can we show the gene symbol&amp;nbsp;instead?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So here comes the second part, annotation fine&amp;nbsp;tuning.&lt;/p&gt;
&lt;h2 id="plot-fine-tune"&gt;Plot fine&amp;nbsp;tune&lt;/h2&gt;
&lt;p&gt;Say, we only care about gene &lt;em&gt;&lt;span class="caps"&gt;BRCA1&lt;/span&gt;&lt;/em&gt;. So we need to get its location, or specifically, the genomic range that cover all &lt;em&gt;&lt;span class="caps"&gt;BRCA1&lt;/span&gt;&lt;/em&gt; isoforms. In the following example, I will demonstrate the Gviz&amp;rsquo;s annotation fine&amp;nbsp;tuning.&lt;/p&gt;
&lt;h3 id="genome-annotation-query-in-bioconductorr"&gt;Genome annotation query in&amp;nbsp;Bioconductor/R&lt;/h3&gt;
&lt;p&gt;If you are not familiar with how to query annotations in Bioconductor, it&amp;rsquo;s easier to think by breaking our goal of finding &lt;em&gt;&lt;span class="caps"&gt;BRCA1&lt;/span&gt;&lt;/em&gt;&amp;lsquo;s ranges into two&amp;nbsp;steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get the transcript&amp;nbsp;IDs&lt;/li&gt;
&lt;li&gt;Query the transcript locations by their&amp;nbsp;IDs&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Getting transcript IDs given their gene symbol is a &lt;code&gt;select()&lt;/code&gt; on OrganismDb&amp;nbsp;object,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Get all transcript IDs of gene BRCA1&lt;/span&gt;
BRCA1_txnames &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; select&lt;span class="p"&gt;(&lt;/span&gt;
    Homo.sapiens&lt;span class="p"&gt;,&lt;/span&gt;
    keys &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;BRCA1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; keytype &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SYMBOL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    columns &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ENTREZID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;TXNAME&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;TXNAME
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt; &lt;/span&gt;BRCA1_txnames
&lt;span class="go"&gt; [1] &amp;quot;uc010whl.2&amp;quot; &amp;quot;uc002icp.4&amp;quot; &amp;quot;uc010whm.2&amp;quot; &amp;quot;uc002icu.3&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt; [5] &amp;quot;uc010cyx.3&amp;quot; &amp;quot;uc002icq.3&amp;quot; &amp;quot;uc002ict.3&amp;quot; &amp;quot;uc010whn.2&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt; [9] &amp;quot;uc010who.3&amp;quot; &amp;quot;uc010whp.2&amp;quot; &amp;quot;uc010whq.1&amp;quot; &amp;quot;uc002idc.1&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;[13] &amp;quot;uc010whr.1&amp;quot; &amp;quot;uc002idd.3&amp;quot; &amp;quot;uc002ide.1&amp;quot; &amp;quot;uc010cyy.1&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;[17] &amp;quot;uc010whs.1&amp;quot; &amp;quot;uc010cyz.2&amp;quot; &amp;quot;uc010cza.2&amp;quot; &amp;quot;uc010wht.1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Look like it has plenty of&amp;nbsp;isoforms!&lt;/p&gt;
&lt;h4 id="via-transcripts"&gt;via &lt;code&gt;transcripts()&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;For the transcript location, the easiest way will be querying the txDb via &lt;code&gt;transcript()&lt;/code&gt;,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;BRCA1_txs &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; transcripts&lt;span class="p"&gt;(&lt;/span&gt;
    Homo.sapiens&lt;span class="p"&gt;,&lt;/span&gt;
    vals&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;tx_name &lt;span class="o"&gt;=&lt;/span&gt; BRCA1_txnames&lt;span class="p"&gt;),&lt;/span&gt;
    columns&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;TXNAME&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SYMBOL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;EXONID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt; &lt;/span&gt;BRCA1_txs
&lt;span class="go"&gt;GRanges object with 20 ranges and 3 metadata columns:&lt;/span&gt;
&lt;span class="go"&gt;       seqnames               ranges strand   |                   EXONID          TXNAME          SYMBOL&lt;/span&gt;
&lt;span class="go"&gt;          &amp;lt;Rle&amp;gt;            &amp;lt;IRanges&amp;gt;  &amp;lt;Rle&amp;gt;   |            &amp;lt;IntegerList&amp;gt; &amp;lt;CharacterList&amp;gt; &amp;lt;CharacterList&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;   [1]    chr17 [41196312, 41276132]      -   | 227486,227485,227482,...      uc010whl.2           BRCA1&lt;/span&gt;
&lt;span class="go"&gt;   [2]    chr17 [41196312, 41277340]      -   | 227487,227486,227485,...      uc002icp.4           BRCA1&lt;/span&gt;
&lt;span class="go"&gt;   [3]    chr17 [41196312, 41277340]      -   | 227487,227464,227463,...      uc010whm.2           BRCA1&lt;/span&gt;
&lt;span class="go"&gt;   [4]    chr17 [41196312, 41277468]      -   | 227489,227486,227485,...      uc002icu.3           BRCA1&lt;/span&gt;
&lt;span class="go"&gt;   [5]    chr17 [41196312, 41277468]      -   | 227489,227486,227482,...      uc010cyx.3           BRCA1&lt;/span&gt;
&lt;span class="go"&gt;   ...      ...                  ...    ... ...                      ...             ...             ...&lt;/span&gt;
&lt;span class="go"&gt;  [16]    chr17 [41243452, 41277340]      -   | 227487,227486,227485,...      uc010cyy.1           BRCA1&lt;/span&gt;
&lt;span class="go"&gt;  [17]    chr17 [41243452, 41277468]      -   | 227489,227486,227485,...      uc010whs.1           BRCA1&lt;/span&gt;
&lt;span class="go"&gt;  [18]    chr17 [41243452, 41277500]      -   | 227488,227486,227485,...      uc010cyz.2           BRCA1&lt;/span&gt;
&lt;span class="go"&gt;  [19]    chr17 [41243452, 41277500]      -   | 227488,227486,227485,...      uc010cza.2           BRCA1&lt;/span&gt;
&lt;span class="go"&gt;  [20]    chr17 [41243452, 41277500]      -   |            227488,227474      uc010wht.1           BRCA1&lt;/span&gt;
&lt;span class="go"&gt;  -------&lt;/span&gt;
&lt;span class="go"&gt;  seqinfo: 93 sequences (1 circular) from hg19 genome&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then get the genomic range of these transcripts by &lt;code&gt;seqnames()&lt;/code&gt;, &lt;code&gt;start()&lt;/code&gt; and &lt;code&gt;end()&lt;/code&gt; functions on the &lt;code&gt;GRanages&lt;/code&gt; object,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;thechr &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;as.character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    seqnames&lt;span class="p"&gt;(&lt;/span&gt;BRCA1_txs&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;))&lt;/span&gt;
st &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;start&lt;span class="p"&gt;(&lt;/span&gt;BRCA1_txs&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;2e4&lt;/span&gt;
en &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;end&lt;span class="p"&gt;(&lt;/span&gt;BRCA1_txs&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1e3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some space are added at both ends so the plot won&amp;rsquo;t tightly fit all transcripts and leave some room for the transcript&amp;nbsp;names. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt; &lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;thechr&lt;span class="p"&gt;,&lt;/span&gt; st&lt;span class="p"&gt;,&lt;/span&gt; en&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;[1] &amp;quot;chr17&amp;quot;    &amp;quot;41176312&amp;quot; &amp;quot;41323420&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="via-exonsby"&gt;via &lt;code&gt;exonsBy()&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Another way to obtain the genomic range is getting the exact range of &lt;span class="caps"&gt;CDS&lt;/span&gt; (e.g. exons and UTRs) for each transcript via &lt;code&gt;exonsBy()&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;BRCA1_cds_by_tx &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; exonsBy&lt;span class="p"&gt;(&lt;/span&gt;
    Homo.sapiens&lt;span class="p"&gt;,&lt;/span&gt; by&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; use.names&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;TRUE&lt;/span&gt;
&lt;span class="p"&gt;)[&lt;/span&gt;BRCA1_txnames&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The function returns a &lt;code&gt;GRangesList&lt;/code&gt; object, a list of &lt;code&gt;GRanges&lt;/code&gt; that each &lt;code&gt;GRanges&lt;/code&gt; object corresponds to a transcript&amp;nbsp;respectively.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt; &lt;/span&gt;BRCA1_cds_by_tx
&lt;span class="go"&gt;GRangesList object of length 20:&lt;/span&gt;
&lt;span class="go"&gt;$uc010whl.2 &lt;/span&gt;
&lt;span class="go"&gt;GRanges object with 22 ranges and 3 metadata columns:&lt;/span&gt;
&lt;span class="go"&gt;       seqnames               ranges strand   |   exon_id   exon_name exon_rank&lt;/span&gt;
&lt;span class="go"&gt;          &amp;lt;Rle&amp;gt;            &amp;lt;IRanges&amp;gt;  &amp;lt;Rle&amp;gt;   | &amp;lt;integer&amp;gt; &amp;lt;character&amp;gt; &amp;lt;integer&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;   [1]    chr17 [41276034, 41276132]      -   |    227486        &amp;lt;NA&amp;gt;         1&lt;/span&gt;
&lt;span class="go"&gt;   [2]    chr17 [41267743, 41267796]      -   |    227485        &amp;lt;NA&amp;gt;         2&lt;/span&gt;
&lt;span class="go"&gt;   [3]    chr17 [41258473, 41258550]      -   |    227482        &amp;lt;NA&amp;gt;         3&lt;/span&gt;
&lt;span class="go"&gt;   [4]    chr17 [41256885, 41256973]      -   |    227481        &amp;lt;NA&amp;gt;         4&lt;/span&gt;
&lt;span class="go"&gt;   [5]    chr17 [41256139, 41256278]      -   |    227480        &amp;lt;NA&amp;gt;         5&lt;/span&gt;
&lt;span class="go"&gt;   ...      ...                  ...    ... ...       ...         ...       ...&lt;/span&gt;
&lt;span class="go"&gt;  [18]    chr17 [41209069, 41209152]      -   |    227462        &amp;lt;NA&amp;gt;        18&lt;/span&gt;
&lt;span class="go"&gt;  [19]    chr17 [41203080, 41203134]      -   |    227461        &amp;lt;NA&amp;gt;        19&lt;/span&gt;
&lt;span class="go"&gt;  [20]    chr17 [41201138, 41201211]      -   |    227459        &amp;lt;NA&amp;gt;        20&lt;/span&gt;
&lt;span class="go"&gt;  [21]    chr17 [41199660, 41199720]      -   |    227458        &amp;lt;NA&amp;gt;        21&lt;/span&gt;
&lt;span class="go"&gt;  [22]    chr17 [41196312, 41197819]      -   |    227457        &amp;lt;NA&amp;gt;        22&lt;/span&gt;

&lt;span class="go"&gt;...&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;19 more elements&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;-------&lt;/span&gt;
&lt;span class="go"&gt;seqinfo: 93 sequences (1 circular) from hg19 genome&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;GRangesList&lt;/code&gt; is not merely a R list structure, which can correctly propagate the GRanges-related functions to all the GRanges it&amp;nbsp;contain.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt; &lt;/span&gt;start&lt;span class="p"&gt;(&lt;/span&gt;BRCA1_cds_by_tx&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;IntegerList of length 20&lt;/span&gt;
&lt;span class="go"&gt;[[&amp;quot;uc010whl.2&amp;quot;]] 41276034 41267743 41258473 ... 41201138 41199660 41196312&lt;/span&gt;
&lt;span class="go"&gt;[[&amp;quot;uc002icp.4&amp;quot;]] 41277199 41276034 41267743 ... 41201138 41199660 41196312&lt;/span&gt;
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we only cares about the widest range, so the hierarchical structure is not useful. It would be better to flatten the &lt;code&gt;GRangesList&lt;/code&gt; first,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt; &lt;/span&gt;BRCA1_cds_flatten &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;unlist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;BRCA1_cds_by_tx&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt; &lt;/span&gt;BRCA1_cds_flatten
&lt;span class="go"&gt;GRanges object with 284 ranges and 3 metadata columns:&lt;/span&gt;
&lt;span class="go"&gt;             seqnames               ranges strand   |   exon_id   exon_name exon_rank&lt;/span&gt;
&lt;span class="go"&gt;                &amp;lt;Rle&amp;gt;            &amp;lt;IRanges&amp;gt;  &amp;lt;Rle&amp;gt;   | &amp;lt;integer&amp;gt; &amp;lt;character&amp;gt; &amp;lt;integer&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;  uc010whl.2    chr17 [41276034, 41276132]      -   |    227486        &amp;lt;NA&amp;gt;         1&lt;/span&gt;
&lt;span class="go"&gt;  uc010whl.2    chr17 [41267743, 41267796]      -   |    227485        &amp;lt;NA&amp;gt;         2&lt;/span&gt;
&lt;span class="go"&gt;  uc010whl.2    chr17 [41258473, 41258550]      -   |    227482        &amp;lt;NA&amp;gt;         3&lt;/span&gt;
&lt;span class="go"&gt;  uc010whl.2    chr17 [41256885, 41256973]      -   |    227481        &amp;lt;NA&amp;gt;         4&lt;/span&gt;
&lt;span class="go"&gt;  uc010whl.2    chr17 [41256139, 41256278]      -   |    227480        &amp;lt;NA&amp;gt;         5&lt;/span&gt;
&lt;span class="go"&gt;         ...      ...                  ...    ... ...       ...         ...       ...&lt;/span&gt;
&lt;span class="go"&gt;  uc010cza.2    chr17 [41249261, 41249306]      -   |    227477        &amp;lt;NA&amp;gt;         7&lt;/span&gt;
&lt;span class="go"&gt;  uc010cza.2    chr17 [41247863, 41247939]      -   |    227476        &amp;lt;NA&amp;gt;         8&lt;/span&gt;
&lt;span class="go"&gt;  uc010cza.2    chr17 [41243452, 41246877]      -   |    227474        &amp;lt;NA&amp;gt;         9&lt;/span&gt;
&lt;span class="go"&gt;  uc010wht.1    chr17 [41277288, 41277500]      -   |    227488        &amp;lt;NA&amp;gt;         1&lt;/span&gt;
&lt;span class="go"&gt;  uc010wht.1    chr17 [41243452, 41246877]      -   |    227474        &amp;lt;NA&amp;gt;         2&lt;/span&gt;
&lt;span class="go"&gt;  -------&lt;/span&gt;
&lt;span class="go"&gt;  seqinfo: 93 sequences (1 circular) from hg19 genome&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have the &lt;span class="caps"&gt;BRCA1&lt;/span&gt; genomic region, rest of the plotting is the&amp;nbsp;same.&lt;/p&gt;
&lt;h3 id="show-only-the-annotations-of-certain-genes"&gt;Show only the annotations of certain&amp;nbsp;genes&lt;/h3&gt;
&lt;p&gt;Before we start to create our own annotation subset, we first take a look at what Gviz generated. The &lt;code&gt;GeneRegionTrack&lt;/code&gt; track store its annotation data at slot &lt;code&gt;range&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt; &lt;/span&gt;grtrack&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="kp"&gt;range&lt;/span&gt;
&lt;span class="go"&gt;GRanges object with 459 ranges and 7 metadata columns:&lt;/span&gt;
&lt;span class="go"&gt;        seqnames               ranges strand   |     feature          id         exon  transcript        gene      symbol   density&lt;/span&gt;
&lt;span class="go"&gt;           &amp;lt;Rle&amp;gt;            &amp;lt;IRanges&amp;gt;  &amp;lt;Rle&amp;gt;   | &amp;lt;character&amp;gt; &amp;lt;character&amp;gt;  &amp;lt;character&amp;gt; &amp;lt;character&amp;gt; &amp;lt;character&amp;gt; &amp;lt;character&amp;gt; &amp;lt;numeric&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;    [1]    chr17 [41177258, 41177364]      +   |        utr5     unknown uc002icn.3_1  uc002icn.3        8153  uc002icn.3         1&lt;/span&gt;
&lt;span class="go"&gt;    [2]    chr17 [41177365, 41177466]      +   |         CDS     unknown uc002icn.3_1  uc002icn.3        8153  uc002icn.3         1&lt;/span&gt;
&lt;span class="go"&gt;    [3]    chr17 [41177977, 41178064]      +   |         CDS     unknown uc002icn.3_2  uc002icn.3        8153  uc002icn.3         1&lt;/span&gt;
&lt;span class="go"&gt;    [4]    chr17 [41179200, 41179309]      +   |         CDS     unknown uc002icn.3_3  uc002icn.3        8153  uc002icn.3         1&lt;/span&gt;
&lt;span class="go"&gt;    [5]    chr17 [41180078, 41180212]      +   |         CDS     unknown uc002icn.3_4  uc002icn.3        8153  uc002icn.3         1&lt;/span&gt;
&lt;span class="go"&gt;    ...      ...                  ...    ... ...         ...         ...          ...         ...         ...         ...       ...&lt;/span&gt;
&lt;span class="go"&gt;  [455]    chr17 [41277294, 41277468]      -   |        utr5     unknown uc010cyx.3_1  uc010cyx.3         672  uc010cyx.3         1&lt;/span&gt;
&lt;span class="go"&gt;  [456]    chr17 [41277294, 41277468]      -   |        utr5     unknown uc002idc.1_1  uc002idc.1         672  uc002idc.1         1&lt;/span&gt;
&lt;span class="go"&gt;  [457]    chr17 [41277294, 41277468]      -   |        utr5     unknown uc010whr.1_1  uc010whr.1         672  uc010whr.1         1&lt;/span&gt;
&lt;span class="go"&gt;  [458]    chr17 [41277294, 41277468]      -   |        utr5     unknown uc010whs.1_1  uc010whs.1         672  uc010whs.1         1&lt;/span&gt;
&lt;span class="go"&gt;  [459]    chr17 [41322143, 41322420]      -   |        utr5     unknown uc010whp.2_1  uc010whp.2         672  uc010whp.2         1&lt;/span&gt;
&lt;span class="go"&gt;  -------&lt;/span&gt;
&lt;span class="go"&gt;  seqinfo: 1 sequence from hg19 genome; no seqlengths&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So we filter out unrelated ranges by checking if the value of metadata column &lt;code&gt;transcript&lt;/code&gt; is one of &lt;em&gt;&lt;span class="caps"&gt;BRCA1&lt;/span&gt;&lt;/em&gt;&amp;lsquo;s transcript&amp;nbsp;IDs,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;BRCA_only_range &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; grtrack&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="kp"&gt;range&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    mcols&lt;span class="p"&gt;(&lt;/span&gt;grtrack&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="kp"&gt;range&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;transcript &lt;span class="o"&gt;%in%&lt;/span&gt; BRCA1_txnames
&lt;span class="p"&gt;]&lt;/span&gt;
grtrack&lt;span class="o"&gt;@&lt;/span&gt;range &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; BRCA_only_range
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or by less hacky way that use the new range to construct another &lt;code&gt;GeneRegionTrack&lt;/code&gt;,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grtrack_BRCA_only &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; GeneRegionTrack&lt;span class="p"&gt;(&lt;/span&gt;
    BRCA_only_range&lt;span class="p"&gt;,&lt;/span&gt;
    chromosome &lt;span class="o"&gt;=&lt;/span&gt; thechr&lt;span class="p"&gt;,&lt;/span&gt; start &lt;span class="o"&gt;=&lt;/span&gt; st&lt;span class="p"&gt;,&lt;/span&gt; end &lt;span class="o"&gt;=&lt;/span&gt; en&lt;span class="p"&gt;,&lt;/span&gt;
    showId &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    name &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Gene Annotation (BRCA1 only)&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
plotTracks&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;itrack&lt;span class="p"&gt;,&lt;/span&gt; gtrack&lt;span class="p"&gt;,&lt;/span&gt; dtrack&lt;span class="p"&gt;,&lt;/span&gt; grtrack_BRCA_only&lt;span class="p"&gt;),&lt;/span&gt;
    from &lt;span class="o"&gt;=&lt;/span&gt; st&lt;span class="p"&gt;,&lt;/span&gt; to &lt;span class="o"&gt;=&lt;/span&gt; en
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="figure"&gt;
  &lt;img src="//blog.liang2.tw/posts/2016/01/plot-seq-depth-gviz/pics/seqdepth_BRCA1_only.png"/&gt;
&lt;/div&gt;

&lt;h3 id="display-gene-symbols-at-annotation-track"&gt;Display gene symbols at annotation&amp;nbsp;track&lt;/h3&gt;
&lt;p&gt;It&amp;rsquo;s more obvious now about how Gviz stores the annotation. All we need is to replace the symbol name with whatever we&amp;nbsp;desire.&lt;/p&gt;
&lt;p&gt;First, we extract the metadata of the &lt;code&gt;GeneRegionTrack&lt;/code&gt;, and query for their gene symbols. Using either the transcript &lt;span class="caps"&gt;ID&lt;/span&gt; or Entrez &lt;span class="caps"&gt;ID&lt;/span&gt; will&amp;nbsp;do. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grtrack_range &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; grtrack&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="kp"&gt;range&lt;/span&gt;
range_mapping &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; select&lt;span class="p"&gt;(&lt;/span&gt;
    Homo.sapiens&lt;span class="p"&gt;,&lt;/span&gt;
    keys &lt;span class="o"&gt;=&lt;/span&gt; mcols&lt;span class="p"&gt;(&lt;/span&gt;grtrack_range&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;symbol&lt;span class="p"&gt;,&lt;/span&gt;
    keytype &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;TXNAME&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    columns &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ENTREZID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SYMBOL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt; &lt;/span&gt;&lt;span class="kp"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;range_mapping&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;      TXNAME SYMBOL ENTREZID&lt;/span&gt;
&lt;span class="go"&gt;1 uc002icn.3   RND2     8153&lt;/span&gt;
&lt;span class="go"&gt;2 uc002icn.3   RND2     8153&lt;/span&gt;
&lt;span class="go"&gt;3 uc002icn.3   RND2     8153&lt;/span&gt;
&lt;span class="go"&gt;4 uc002icn.3   RND2     8153&lt;/span&gt;
&lt;span class="go"&gt;5 uc002icn.3   RND2     8153&lt;/span&gt;
&lt;span class="go"&gt;6 uc002icn.3   RND2     8153&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we concatenate the information of transcript &lt;span class="caps"&gt;ID&lt;/span&gt; and gene symbol using &lt;a href="https://cran.r-project.org/web/packages/stringr/index.html"&gt;stringr&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;stringr&lt;span class="p"&gt;)&lt;/span&gt;
new_symbols &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    range_mapping&lt;span class="p"&gt;,&lt;/span&gt;
    str_c&lt;span class="p"&gt;(&lt;/span&gt;SYMBOL&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; (&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; TXNAME&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; sep &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt; &lt;/span&gt;&lt;span class="kp"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;new_symbols&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="go"&gt;[1] &amp;quot;RND2 (uc002icn.3)&amp;quot; &amp;quot;NBR2 (uc002idf.3)&amp;quot; &amp;quot;NBR2 (uc010czb.2)&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;[4] &amp;quot;NBR2 (uc002idg.3)&amp;quot; &amp;quot;NBR2 (uc002idh.3)&amp;quot; &amp;quot;NBR1 (uc010czd.3)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Like how we extract &lt;em&gt;&lt;span class="caps"&gt;BRCA1&lt;/span&gt;&lt;/em&gt;-only annotations, we construct a new &lt;code&gt;GeneRegionTrack&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grtrack_symbol &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; GeneRegionTrack&lt;span class="p"&gt;(&lt;/span&gt;
    grtrack&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="kp"&gt;range&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    chromosome &lt;span class="o"&gt;=&lt;/span&gt; thechr&lt;span class="p"&gt;,&lt;/span&gt; start &lt;span class="o"&gt;=&lt;/span&gt; st&lt;span class="p"&gt;,&lt;/span&gt; end &lt;span class="o"&gt;=&lt;/span&gt; en&lt;span class="p"&gt;,&lt;/span&gt;
    showId &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    name &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Gene Annotation w. Symbol&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
symbol&lt;span class="p"&gt;(&lt;/span&gt;grtrack_symbol&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; new_symbols
plotTracks&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;itrack&lt;span class="p"&gt;,&lt;/span&gt; gtrack&lt;span class="p"&gt;,&lt;/span&gt; dtrack&lt;span class="p"&gt;,&lt;/span&gt; grtrack_symbol&lt;span class="p"&gt;),&lt;/span&gt;
    from &lt;span class="o"&gt;=&lt;/span&gt; st&lt;span class="p"&gt;,&lt;/span&gt; to &lt;span class="o"&gt;=&lt;/span&gt; en
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="figure"&gt;
  &lt;img src="//blog.liang2.tw/posts/2016/01/plot-seq-depth-gviz/pics/seqdepth_gene_symbol.png"/&gt;
&lt;/div&gt;

&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;So we&amp;rsquo;ve learnt how to plot using Gviz. You should go explore other data tracks or try to combine sequencing depth of multiple samples. I found the design of Gviz is clean and easy to modify. I think I&amp;rsquo;ll use Gviz whenever genome-related plots are&amp;nbsp;needed. &lt;/p&gt;
&lt;p&gt;Really glad I&amp;rsquo;ve tried it&amp;nbsp;:)&lt;/p&gt;
&lt;h2 id="supplementary-plot-bam-files-directly"&gt;Supplementary - Plot &lt;span class="caps"&gt;BAM&lt;/span&gt; files&amp;nbsp;directly&lt;/h2&gt;
&lt;p&gt;We will start by replacing &lt;code&gt;DataTrack&lt;/code&gt; with &lt;code&gt;AlignmentsTrack&lt;/code&gt;. Also we select a smaller region this time so the read mapping can be clearly&amp;nbsp;seen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;st &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;41.196e6L&lt;/span&gt;
en &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;41.202e6L&lt;/span&gt;
gtrack &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; GenomeAxisTrack&lt;span class="p"&gt;(&lt;/span&gt;cex &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# set the font size larger&lt;/span&gt;
altrack &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; AlignmentsTrack&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;myseq.bam&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; isPaired &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; col.mates &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;deeppink&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
plotTracks&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;gtrack&lt;span class="p"&gt;,&lt;/span&gt; altrack&lt;span class="p"&gt;,&lt;/span&gt; grtrack&lt;span class="p"&gt;),&lt;/span&gt;
    from &lt;span class="o"&gt;=&lt;/span&gt; st&lt;span class="p"&gt;,&lt;/span&gt; to &lt;span class="o"&gt;=&lt;/span&gt; en
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="figure"&gt;
  &lt;img src="//blog.liang2.tw/posts/2016/01/plot-seq-depth-gviz/pics/seqdepth_BAM_default.png"/&gt;
&lt;/div&gt;

&lt;p&gt;To plot only the coverage, set the type as &lt;code&gt;coverage&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;altrack &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; AlignmentsTrack&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;myseq.bam&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; type &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;coverage&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="figure"&gt;
  &lt;img src="//blog.liang2.tw/posts/2016/01/plot-seq-depth-gviz/pics/seqdepth_BAM_coverage_only.png"/&gt;
&lt;/div&gt;

&lt;h3 id="fancier-alignment-display"&gt;Fancier alignment&amp;nbsp;display&lt;/h3&gt;
&lt;p&gt;Spend some time reading the documentation, the alignment can be much more&amp;nbsp;fancier. &lt;/p&gt;
&lt;p&gt;For example, when looking at a much smaller genome region, we many want to see the sequence and read mismatches. It could be done by adding a new track &lt;code&gt;SequenceTrack&lt;/code&gt; to include the genome&amp;nbsp;sequence,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;small_st &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;41267.735e3L&lt;/span&gt;
small_en &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;41267.805e3L&lt;/span&gt;

&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;BSgenome.Hsapiens.UCSC.hg19&lt;span class="p"&gt;)&lt;/span&gt;
strack &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; SequenceTrack&lt;span class="p"&gt;(&lt;/span&gt;
    Hsapiens&lt;span class="p"&gt;,&lt;/span&gt;
    chromosome &lt;span class="o"&gt;=&lt;/span&gt; thechr&lt;span class="p"&gt;,&lt;/span&gt; from &lt;span class="o"&gt;=&lt;/span&gt; small_en&lt;span class="p"&gt;,&lt;/span&gt; to &lt;span class="o"&gt;=&lt;/span&gt; small_st&lt;span class="p"&gt;,&lt;/span&gt;
    cex&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0.8&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We tweak other tracks as well to make sure the figure won&amp;rsquo;t explode by too much information. Gene annotations are collapsed down to one liner. Also, aligned read&amp;rsquo;s height is increased to fit in individual letters (e.g., &lt;span class="caps"&gt;ATCG&lt;/span&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grtrack_small &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; GeneRegionTrack&lt;span class="p"&gt;(&lt;/span&gt;
   grtrack&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="kp"&gt;range&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   chromosome &lt;span class="o"&gt;=&lt;/span&gt; thechr&lt;span class="p"&gt;,&lt;/span&gt;
   start &lt;span class="o"&gt;=&lt;/span&gt; small_st&lt;span class="p"&gt;,&lt;/span&gt; end &lt;span class="o"&gt;=&lt;/span&gt; small_en&lt;span class="p"&gt;,&lt;/span&gt;
   stacking &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dense&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   name &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Gene Annotation&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
altrack &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; AlignmentsTrack&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;myseq.bam&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    isPaired &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    min.height &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; max.height &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; coverageHeight &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0.15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; size &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;50&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
plotTracks&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;gtrack&lt;span class="p"&gt;,&lt;/span&gt; altrack&lt;span class="p"&gt;,&lt;/span&gt; grtrack_small&lt;span class="p"&gt;,&lt;/span&gt; strack&lt;span class="p"&gt;),&lt;/span&gt;
    from &lt;span class="o"&gt;=&lt;/span&gt; small_st&lt;span class="p"&gt;,&lt;/span&gt; to &lt;span class="o"&gt;=&lt;/span&gt; small_en
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="figure"&gt;
  &lt;img src="//blog.liang2.tw/posts/2016/01/plot-seq-depth-gviz/pics/seqdepth_BAM_small_region.png"/&gt;
&lt;/div&gt;

&lt;p&gt;We found a C&amp;gt;T &lt;span class="caps"&gt;SNP&lt;/span&gt;&amp;nbsp;here!&lt;/p&gt;</summary><category term="en"></category><category term="r"></category><category term="bioconductor"></category><category term="gviz"></category><category term="NGS"></category></entry><entry><title>Overview of Genomic Data Processing inÂ Bioconductor</title><link href="//blog.liang2.tw/posts/2015/12/biocondutor-genomic-data/" rel="alternate"></link><updated>2015-12-29T20:28:00+08:00</updated><author><name>Liang2</name></author><id>tag:blog.liang2.tw,2015-12-29:posts/2015/12/biocondutor-genomic-data/</id><summary type="html">&lt;p&gt;Sorry for the late update. In the past two months, I finished my Ph.D. applications (hope to hear good news in the next two months) and was busy preparing the PyCon Taiwan 2016. Also, a year-long website development finally came to the&amp;nbsp;end.&lt;/p&gt;
&lt;p&gt;Now most things are set so I can back to writing my&amp;nbsp;blog.&lt;/p&gt;
&lt;p&gt;Since September, there accumulates at least 5 drafts and I don&amp;rsquo;t know when I can finish them, so I think I have to change my writing strategy. I will first publish things as soon as information collection is done, and deeper reviews will be given in the following posts. Right now I will focus on Bioconductor (and general Bioinformatics topics) and&amp;nbsp;Django.&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#bioconductor"&gt;Bioconductor&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#annotation-and-genome-reference"&gt;Annotation and Genome&amp;nbsp;Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#experiment-data-storage"&gt;Experiment Data&amp;nbsp;Storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#operations-on-genome"&gt;Operations on&amp;nbsp;Genome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#genomic-data-visualization"&gt;Genomic data&amp;nbsp;visualization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="bioconductor"&gt;Bioconductor&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.bioconductor.org/"&gt;Bioconductor&lt;/a&gt; is indeed a rich resources for R both in terms of data and tools. And I found I have yet spent time seriously understanding the whole ecosystem, which I believe can drastically lighten the loading of daily&amp;nbsp;analysis.&lt;/p&gt;
&lt;p&gt;Bioconductor&amp;rsquo;s website is informative. If you are familar with R, you should already know that in order to understand the usage of a package, one of the best way is to read its vignettes. Packages on Bioconductor generally have vignettes, which is really helpful and the website makes them accessible. On top of that, they have &lt;a href="https://www.bioconductor.org/help/course-materials/"&gt;Courses &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Conferences&lt;/a&gt; and &lt;a href="https://www.bioconductor.org/help/workflows/"&gt;Workflows&lt;/a&gt;. The former section collects all conference materials in the past few years, which contains package hands-on, analysis tutorial, and R advanced topics. It&amp;rsquo;s a hidden gem to me since I have already found numerous materials worth reading only after a glance over it. The latter one should be well-known. It gives examples of typical analysis&amp;nbsp;workflows.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m interested in the following topics in&amp;nbsp;Biocondutor:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Annotation and genome reference (OrgDb, TxDb, OrganismDb,&amp;nbsp;BSgenome)&lt;/li&gt;
&lt;li&gt;Experiment data storage&amp;nbsp;(ExpressionSets)&lt;/li&gt;
&lt;li&gt;Operations on genome&amp;nbsp;(GenomicRanges)&lt;/li&gt;
&lt;li&gt;Genomic data visualization (Gviz,&amp;nbsp;ggbio)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keywords in Biocondutors for each topic are attached in the parens, mostly being the package name. For each topic, I&amp;rsquo;ll put the related resources I collected in the following&amp;nbsp;sections.&lt;/p&gt;
&lt;p&gt;Before the listing, I found &lt;a href="http://genomicsclass.github.io/book/"&gt;PH525x series&lt;/a&gt; maintained by Rafael Irizarry and Michael Love from Harvard serves as a comprehensive entry point for almost every related topic. The site is the accompanied resources for their edX classes. Both of them worth taking a&amp;nbsp;look.&lt;/p&gt;
&lt;h3 id="annotation-and-genome-reference"&gt;Annotation and Genome&amp;nbsp;Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://genomicsclass.github.io/book/pages/annoPhen.html"&gt;Annotating phenotypes and molecular function&lt;/a&gt; from &lt;a href="http://genomicsclass.github.io/book/"&gt;PH525x series&lt;/a&gt; gives a good overview and a taste of the powerful ecosystem Bioconductor&amp;nbsp;provides.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.bioconductor.org/help/course-materials/2015/BioC2015/Annotation_Resources.html"&gt;Annotation Resources&lt;/a&gt; from &lt;a href="https://www.bioconductor.org/help/course-materials/2015/BioC2015/"&gt;BioC 2015&lt;/a&gt; gives more extensive introduction about all available types of references from genome sequences to transcriptome and gene&amp;nbsp;info.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, human comes&amp;nbsp;with&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://bioconductor.org/packages/release/data/annotation/html/org.Hs.eg.db.html"&gt;org.Hs.eg.db&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bioconductor.org/packages/release/data/annotation/html/TxDb.Hsapiens.UCSC.hg38.knownGene.html"&gt;TxDb.Hsapiens.&lt;span class="caps"&gt;UCSC&lt;/span&gt;.hg38.knownGene&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bioconductor.org/packages/release/data/annotation/html/Homo.sapiens.html"&gt;Homo.sapiens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bioconductor.org/packages/release/data/annotation/html/BSgenome.Hsapiens.UCSC.hg38.html"&gt;BSgenome.Hsapiens.&lt;span class="caps"&gt;UCSC&lt;/span&gt;.hg38&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="experiment-data-storage"&gt;Experiment Data&amp;nbsp;Storage&lt;/h3&gt;
&lt;p&gt;ExpressionSet helps store the expression experiment data, which one can combine   expression values and phenotypes of the same sample. Additionally the experiment data (like descriptions of &lt;span class="caps"&gt;GEO&lt;/span&gt; dataset) can be attached as&amp;nbsp;well.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://genomicsclass.github.io/book/pages/eset.html"&gt;The ExpressionSet container&lt;/a&gt; from &lt;a href="http://genomicsclass.github.io/book/"&gt;PH525x series&lt;/a&gt; gives an intro. It should be sufficient enough to use ExpressionSet in daily&amp;nbsp;work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.bioconductor.org/packages/release/bioc/vignettes/Biobase/inst/doc/ExpressionSetIntroduction.pdf"&gt;The ExpressionSet Introduction&lt;/a&gt; from its package &lt;a href="https://www.bioconductor.org/packages/release/bioc/html/Biobase.html"&gt;Biobase&lt;/a&gt;âs vignette gives detailed&amp;nbsp;explanation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="operations-on-genome"&gt;Operations on&amp;nbsp;Genome&lt;/h3&gt;
&lt;p&gt;I haven&amp;rsquo;t gone into the details, but operations about genomic ranges are often tricky and more importantly, badly&amp;nbsp;optimized.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://genomicsclass.github.io/book/pages/iranges_granges.html"&gt;IRanges and GRanges&lt;/a&gt; and &lt;a href="http://genomicsclass.github.io/book/pages/operateGRanges.html"&gt;GRanges operations&lt;/a&gt; from &lt;a href="http://genomicsclass.github.io/book/"&gt;PH525x series&lt;/a&gt; give the overview of using the package &lt;a href="https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html"&gt;GenomicRanges&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.bioconductor.org/packages/release/bioc/vignettes/GenomicRanges/inst/doc/GenomicRangesIntroduction.pdf"&gt;An Introduction to Genomic Ranges Classes&lt;/a&gt;, a &lt;a href="https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html"&gt;GenomicRanges&lt;/a&gt; vignette, gives a detailed&amp;nbsp;view.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Also, their paper, &lt;a href="http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1003118"&gt;&amp;ldquo;Software for Computing and Annotating Genomic Ranges&amp;rdquo;, &lt;em&gt;&lt;span class="caps"&gt;PLOS&lt;/span&gt; One&lt;/em&gt;&lt;/a&gt; should be another overview source of the&amp;nbsp;package.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://cran.r-project.org/web/packages/data.table/index.html"&gt;data.table&lt;/a&gt;&amp;lsquo;s &lt;code&gt;foverlap&lt;/code&gt; function worth the comparison, since I already use it and I know it is &lt;a href="https://github.com/Rdatatable/data.table/wiki/talks/EARL2014_OverlapRangeJoin_Arun.pdf"&gt;blazingly fast&lt;/a&gt;. &lt;code&gt;foverlap&lt;/code&gt; handles the overlapping of integer ranges so it can be applied to genomic operation. Its code is quite complex so its mechanism is still a myth to me. I&amp;rsquo;d like to see its comparison with using database like&amp;nbsp;SQLite.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="genomic-data-visualization"&gt;Genomic data&amp;nbsp;visualization&lt;/h3&gt;
&lt;p&gt;Basically I can find two&amp;nbsp;packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bioconductor.org/packages/release/bioc/html/Gviz.html"&gt;Gviz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bioconductor.org/packages/release/bioc/html/ggbio.html"&gt;ggbio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don&amp;rsquo;t know their difference yet. Both of them can produce well-done figures. But I think I have some experience with ggbio, which was a bit tricky to use. So for now I will go for&amp;nbsp;Gviz.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bioconductor.org/help/course-materials/2012/BiocEurope2012/GvizEuropeanBioc2012.pdf"&gt;Visualizing genomic features with the Gviz package&lt;/a&gt; given at Bioc Europe 2012 has a decent introduction about&amp;nbsp;Gviz.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bioconductor.org/packages/release/bioc/vignettes/Gviz/inst/doc/Gviz.pdf"&gt;The Gviz User Guide&lt;/a&gt; looks very comprehensive, which also cover usage with expression and alignment&amp;nbsp;results.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;These resources should be enough for weeks of trying. It&amp;rsquo;s excited to find so many useful&amp;nbsp;tools.&lt;/p&gt;
&lt;p&gt;So, good luck to me for my Ph.D. application, PyCon Taiwan 2016, and a shorter blog posting&amp;nbsp;frequency.&lt;/p&gt;</summary><category term="en"></category><category term="r"></category><category term="bioconductor"></category></entry><entry><title>FASTA/Q sequence processing toolkit âÂ seqtk</title><link href="//blog.liang2.tw/posts/2015/09/seqtk/" rel="alternate"></link><updated>2015-09-27T14:11:00+08:00</updated><author><name>Liang2</name></author><id>tag:blog.liang2.tw,2015-09-27:posts/2015/09/seqtk/</id><summary type="html">&lt;p&gt;This is the first post of the series of my common &lt;span class="caps"&gt;NGS&lt;/span&gt; processing workflows and&amp;nbsp;notes.&lt;/p&gt;
&lt;p&gt;Some of the most common operation in sequence processing is &lt;span class="caps"&gt;FASTQ&lt;/span&gt; â &lt;span class="caps"&gt;FASTA&lt;/span&gt; conversion. Tons of conversion scripts using either sed or awk can be found by search. For&amp;nbsp;example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# FASTQ to FASTA&lt;/span&gt;
&lt;span class="c1"&gt;# Assume every read record takes exactly 4 line&lt;/span&gt;
&lt;span class="c1"&gt;# Ref: http://stackoverflow.com/a/10359425&lt;/span&gt;
$ sed -n &lt;span class="s1"&gt;&amp;#39;1~4s/^@/&amp;gt;/p;2~4p&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The assumption of 4 lines per read usually holds for recent &lt;span class="caps"&gt;NGS&lt;/span&gt; sequencing data, so not a big&amp;nbsp;deal.&lt;/p&gt;
&lt;p&gt;In many case the sequence is gzip&amp;rsquo;d. It is still a piece of cake when combining with pipe&amp;nbsp;editing,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gzcat myseq.fq.gz &lt;span class="p"&gt;|&lt;/span&gt; sed -n &lt;span class="s1"&gt;&amp;#39;1~4s/^@/&amp;gt;/p;2~4p&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; gzip &amp;gt; myseq.fa.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, things can get complex really fast when one wants to additionally do reverse complement, randomly sample a subset of reads, and many other types of sequence manipulation. Efficiency matters if those tasks are applied to tens of millions of reads. Even a few nanoseconds longer of computing time difference per read can make a difference at this scale of&amp;nbsp;reads.&lt;/p&gt;
&lt;h3 id="seqtk"&gt;Seqtk&lt;/h3&gt;
&lt;p&gt;So &lt;a href="https://github.com/lh3/seqtk"&gt;seqtk&lt;/a&gt; comes into rescue. It is written in C and &lt;span class="caps"&gt;MIT&lt;/span&gt; licensed. &lt;a href="https://www.biostars.org/p/85929/#86082"&gt;A quick comparison&lt;/a&gt; shows it is generally faster than other &lt;span class="caps"&gt;UNIX&lt;/span&gt;-based solutions, let alone implementations based on scripting&amp;nbsp;languages.&lt;/p&gt;
&lt;p&gt;Seqtk bundles many other operations, but I&amp;rsquo;ll just mention those I frequently&amp;nbsp;use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$seqtk

Usage:   seqtk &amp;lt;command&amp;gt; &amp;lt;arguments&amp;gt;
Version: 1.0-r77-dirty

Command: seq       common transformation of FASTA/Q
         comp      get the nucleotide composition of FASTA/Q
         sample    subsample sequences
         subseq    extract subsequences from FASTA/Q
         fqchk     fastq QC &lt;span class="o"&gt;(&lt;/span&gt;base/quality summary&lt;span class="o"&gt;)&lt;/span&gt;
         mergepe   interleave two PE FASTA/Q files
         trimfq    trim FASTQ using the Phred algorithm

         hety      regional heterozygosity
         mutfa     point mutate FASTA at specified positions
         mergefa   merge two FASTA/Q files
         dropse    drop unpaired from interleaved PE FASTA/Q
         rename    rename sequence names
         randbase  choose a random base from hets
         cutN      cut sequence at long N
         listhet   extract the position of each het
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="fastq-fasta"&gt;&lt;span class="caps"&gt;FASTQ&lt;/span&gt; â &lt;span class="caps"&gt;FASTA&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Read (gzip&amp;rsquo;d) &lt;span class="caps"&gt;FASTQ&lt;/span&gt; and write out as &lt;span class="caps"&gt;FASTA&lt;/span&gt;,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ seqtk seq -A in.fq&lt;span class="o"&gt;[&lt;/span&gt;.gz&lt;span class="o"&gt;]&lt;/span&gt; &amp;gt; out.fa
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To make the output gzip&amp;rsquo;d again, piped with&amp;nbsp;gzip,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ seqtk seq -A in.fq&lt;span class="o"&gt;[&lt;/span&gt;.gz&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; gzip &amp;gt; out.fa.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="reverse-complement"&gt;Reverse&amp;nbsp;complement&lt;/h3&gt;
&lt;p&gt;If one wants to debug the R2 reads of pair-end sequencing (second read on forward strand), since they contain reverse complement sequence of the insert &lt;span class="caps"&gt;DNA&lt;/span&gt;, one needs to reverse complement R2 reads again to debug directly by bare human&amp;nbsp;eyes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ seqtk seq -r R2.fq &amp;gt; R2_rc.fq

$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;gt; Example R2 seq&lt;/span&gt;
&lt;span class="s1"&gt;  GCATTGGTGGTTCAGTGGTAGAATTCT&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; seqtk seq -r
&lt;span class="c1"&gt;# &amp;gt; Example R2 seq&lt;/span&gt;
&lt;span class="c1"&gt;# AGAATTCTACCACTGAACCACCAATGC&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="quality-check"&gt;Quality&amp;nbsp;check&lt;/h3&gt;
&lt;p&gt;To be honest, &lt;a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"&gt;FastQC&lt;/a&gt; is more frequently used for quality check because it generates &lt;a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/good_sequence_short_fastqc.html"&gt;reports with beautiful figures&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But for a detail report on each read position, one should consider &lt;code&gt;seqtk fqchk&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ seqtk fqchk myseq.fq&lt;span class="o"&gt;[&lt;/span&gt;.gz&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By default it sets &lt;code&gt;-q 20&lt;/code&gt;. This quality threshold determines the threshold of counting a base as low or high quality, shown as &lt;code&gt;%low&lt;/code&gt; and &lt;code&gt;%high&lt;/code&gt; per read position. In the default case, quality score higher than 20 will be treated as high quality&amp;nbsp;bases.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;min_len: 10; max_len: 174; avg_len: 28.92; 37 distinct quality values
POS #bases    %A   %C   %G   %T   %N  avgQ errQ %low %high
ALL 236344886 17.0 22.5 31.3 29.2 0.0 39.9 37.6 0.1  99.9
1   8172342   8.9  12.4 57.0 21.7 0.0 39.6 29.0 0.5  99.5
2   8172342   7.7  62.5 16.2 13.7 0.0 39.8 37.8 0.2  99.8
3   8172342   50.3 24.1 11.9 13.6 0.0 39.8 38.2 0.1  99.9
4   8172342   10.4 22.9 15.3 51.3 0.0 39.9 38.7 0.1  99.9
5   8172342   14.3 12.9 22.3 50.5 0.0 39.8 37.0 0.2  99.8
# ... (trimmed)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The following columns, &lt;code&gt;avgQ&lt;/code&gt; and &lt;code&gt;errQ&lt;/code&gt;, need more explanation. Average quality (&lt;code&gt;avgQ&lt;/code&gt;) is computed by weighted mean of each base&amp;rsquo;s&amp;nbsp;quality,&lt;/p&gt;
&lt;div class="math"&gt;$$
    \text{avgQ} = \dfrac{\sum_{q=0}^{93} q \cdot n_q}{\sum_{q = 0}^{93} n_q},
$$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(n_q\)&lt;/span&gt; is the number of bases with quality score being &lt;span class="math"&gt;\(q\)&lt;/span&gt;. The magic number 93 comes from the quality score of Sanger sequencing&lt;sup id="fnref:sanger-qual-score"&gt;&lt;a class="footnote-ref" href="#fn:sanger-qual-score" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;, whose score ranges from 0 to&amp;nbsp;93.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;errQ&lt;/code&gt; we need more background knowledge about how quality score is computed. A base with quality score &lt;span class="math"&gt;\(q\)&lt;/span&gt; implies the probability of being erroneously called, &lt;span class="math"&gt;\(P_q\)&lt;/span&gt;,&amp;nbsp;is &lt;/p&gt;
&lt;div class="math"&gt;$$
    P_q = 10^{\frac{-q}{10}}, \hspace{1em} q = -10\log_{10}{P_q}.
$$&lt;/div&gt;
&lt;p&gt;Therefore, given &lt;span class="math"&gt;\(q\)&lt;/span&gt; being &lt;span class="math"&gt;\(0, 1, 2, \ldots\)&lt;/span&gt;, seqtk has a conversion table &lt;code&gt;perr&lt;/code&gt; from quality score to&amp;nbsp;probability,&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Q&lt;/th&gt;
&lt;th align="right"&gt;0&lt;/th&gt;
&lt;th align="right"&gt;1&lt;/th&gt;
&lt;th align="right"&gt;2&lt;/th&gt;
&lt;th align="right"&gt;3&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;strong&gt;P&lt;/strong&gt;&lt;/td&gt;
&lt;td align="right"&gt;0.5&lt;/td&gt;
&lt;td align="right"&gt;0.5&lt;/td&gt;
&lt;td align="right"&gt;0.5&lt;/td&gt;
&lt;td align="right"&gt;0.5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Q&lt;/th&gt;
&lt;th align="right"&gt;4&lt;/th&gt;
&lt;th align="right"&gt;5&lt;/th&gt;
&lt;th align="center"&gt;&amp;hellip;&lt;/th&gt;
&lt;th align="right"&gt;38&lt;/th&gt;
&lt;th align="right"&gt;39&lt;/th&gt;
&lt;th align="right"&gt;40&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;strong&gt;P&lt;/strong&gt;&lt;/td&gt;
&lt;td align="right"&gt;0.398107&lt;/td&gt;
&lt;td align="right"&gt;0.316228&lt;/td&gt;
&lt;td align="center"&gt;&amp;hellip;&lt;/td&gt;
&lt;td align="right"&gt;0.000158&lt;/td&gt;
&lt;td align="right"&gt;0.000126&lt;/td&gt;
&lt;td align="right"&gt;0.000100&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Based on the probability, it computes the expected number of base call errors, num_err, and the empirical probability of having a base call error at this position,&amp;nbsp;errP, &lt;/p&gt;
&lt;div class="math"&gt;$$
    \text{num_err} = \sum_q P_q \cdot n_q, \hspace{1em} \text{errP} = \frac{\text{num_err}}{\sum_q n_q}.
$$&lt;/div&gt;
&lt;p&gt;Thus the &lt;code&gt;errQ&lt;/code&gt; is the equivalent quality score of errP, which better interprets the probability of base call error than &lt;code&gt;avgQ&lt;/code&gt;, &lt;/p&gt;
&lt;div class="math"&gt;$$
    \text{errQ} = -10\log_{10}{\text{errP}}.
$$&lt;/div&gt;
&lt;p&gt;By passing &lt;code&gt;-q 0&lt;/code&gt; to &lt;code&gt;seqtk fqchk&lt;/code&gt;, one can get the proportion of all distinct quality scores at each position. This information is pretty useful if the sequencing data is all a mess and one needs to figure out the&amp;nbsp;cause.&lt;/p&gt;
&lt;p&gt;Though some of the &lt;code&gt;seqtk fqchk&lt;/code&gt;&lt;span class="quo"&gt;&amp;lsquo;&lt;/span&gt;s behavior is not documented, it should be straight forward enough to understand. All in all, the details can always be found in the &lt;a href="https://github.com/lh3/seqtk/blob/4feb6e81444ab6bc44139dd3a125068f81ae4ad8/seqtk.c#L1483"&gt;source code&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="summary"&gt;Summary&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/lh3/seqtk"&gt;Seqtk&lt;/a&gt; is fast to use for daily routines of &lt;span class="caps"&gt;FASTA&lt;/span&gt;/Q conversion. On top of that it provide various functionalities such as read random sampling, quality check, and many I haven&amp;rsquo;t tried or&amp;nbsp;mentioned.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:sanger-qual-score"&gt;
&lt;p&gt;See multiple specifications of quality score at &lt;a href="http://scikit-bio.org/docs/latest/generated/skbio.io.format.fastq.html#quality-score-variants"&gt;sckit-bio doc&lt;/a&gt;. The score is &lt;a href="https://en.wikipedia.org/wiki/Phred_quality_score"&gt;Phred quality score&lt;/a&gt;. More other score representations can be found at &lt;a href="https://en.wikipedia.org/wiki/FASTQ_format"&gt;&lt;span class="caps"&gt;FASTQ&lt;/span&gt; wiki&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:sanger-qual-score" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Note that the probability of q less than 4 is fixed with 0.5. A quick computation can see when &lt;span class="math"&gt;\(q = 3\)&lt;/span&gt;, its actual Phred probability is &lt;span class="math"&gt;\(10 ^ {-0.3} = 0.501\)&lt;/span&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="en"></category><category term="seqtk"></category><category term="NGS"></category></entry></feed>